- name: BUILD NETWORK AUTOMATION MACHINE
  hosts: automation
  gather_facts: true
  
  tasks:

    - name: Chceck simple ping-pong connectivity 
      ping:

    - name: Add public key to authorized_keys
      ansible.posix.authorized_key:
        user: "{{ ssh.user }}"
        key: "{{ ssh.public_key }}"
        state: present

    - name: Allow '{{ ansible_user }}' user to run sudo without a password
      become: true
      copy:
        dest: /etc/sudoers.d/{{ ansible_user }}_nopasswd
        content: "{{ ansible_user }} ALL=(ALL) NOPASSWD:ALL\n"
        owner: root
        group: root
        mode: '0440'

    - name: Run apt update
      apt:
        update_cache: yes
      become: true

    - name: Run apt upgrade
      apt:
        upgrade: yes
      become: true
      register: apt
    
    - name: Run autoremove
      apt:
        autoremove: yes
      register: apt
      become: true

    - name: Run apt clean
      apt:
        clean: yes
      become: true
    - name: Run apt autoclean
      apt:
        autoclean: yes
      become: true

    - name: Check if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required

    - name: Reboot system if needed
      reboot:
        msg: "Rebooting after package upgrades"
        pre_reboot_delay: 5
      when: reboot_required.stat.exists
    
    - name: System package installation
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop: "{{ system_packages }}"
      become: true

    - name: Python packages installation
      ansible.builtin.pip:
        name: "{{ item }}"
        state: present
        extra_args: --break-system-packages
      loop: "{{ python_packages }}"

    - name: Docker installation
      import_role:
        name: geerlingguy.docker

    - name: Ensure Docker service is running
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

    - name: Ensure Docker Compose plugin is installed
      ansible.builtin.package:
        name: "{{ docker_compose_package }}"
        state: "{{ docker_compose_package_state }}"

    - name: Ensure Docker service is enabled
      ansible.builtin.systemd:
        name: docker
        enabled: true
        state: started

    - name: Ensure Docker Compose plugin is enabled
      ansible.builtin.command:
        cmd: docker compose version
      register: docker_compose_version
      changed_when: false
      failed_when: docker_compose_version.rc != 0

    # - name: Pobierz i uruchom skrypt instalacyjny Containerlab
    #   shell: curl -sL https://containerlab.dev/setup | sudo -E bash -s "all"



    # - name: Clone containerlab repo
    #   git:
    #     repo: git@github.com:michtur/containerlab.git
    #     dest: /home/{{ ansible_user}}/containerlab
    #     clone: yes
    #     update: yes
    #     accept_hostkey: yes

