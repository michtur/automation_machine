- name: BUILD NETWORK AUTOMATION MACHINE
  hosts: automation
  gather_facts: true
  
  tasks:

    # - name: Chceck simple ping-pong connectivity 
    #   ping:

    # - name: Add public key to authorized_keys
    #   ansible.posix.authorized_key:
    #     user: "{{ ansible_user }}"
    #     key: "{{ ssh.public_key }}"
    #     state: present

    # - name: Allow '{{ ansible_user }}' user to run sudo without a password
    #   become: true
    #   copy:
    #     dest: /etc/sudoers.d/{{ ansible_user }}_nopasswd
    #     content: "{{ ansible_user }} ALL=(ALL) NOPASSWD:ALL\n"
    #     owner: root
    #     group: root
    #     mode: '0440'

    # - name: Run apt update
    #   apt:
    #     update_cache: yes
    #   become: true

    # - name: Run apt upgrade
    #   apt:
    #     upgrade: yes
    #   become: true
    #   register: apt
    
    # - name: Run autoremove
    #   apt:
    #     autoremove: yes
    #   register: apt
    #   become: true

    # - name: Run apt clean
    #   apt:
    #     clean: yes
    #   become: true
    # - name: Run apt autoclean
    #   apt:
    #     autoclean: yes
    #   become: true

    # - name: Check if reboot is required
    #   stat:
    #     path: /var/run/reboot-required
    #   register: reboot_required

    # - name: System rebooting
    #   reboot:
    #     msg: "Rebooting after package upgrades"
    #     pre_reboot_delay: 5
    #   when: reboot_required.stat.exists
    #   become: true

    # - name: System package installation
    #   ansible.builtin.package:
    #     name: "{{ item }}"
    #     state: latest
    #   loop: "{{ system_packages }}"
    #   become: true

    # - name: Python packages installation
    #   ansible.builtin.pip:
    #     name: "{{ item }}"
    #     state: latest
    #     extra_args: --break-system-packages
    #   loop: "{{ python_packages }}"

#===========DOCKER INSTALLATION===========
    # - name: Docker installation
    #   import_role:
    #     name: geerlingguy.docker

    # - name: Ensure Docker service is running
    #   ansible.builtin.service:
    #     name: docker
    #     state: started
    #     enabled: true

    # - name: Ensure Docker service is enabled
    #   ansible.builtin.systemd:
    #     name: docker
    #     enabled: true
    #     state: started

    # - name: Ensure Docker Compose plugin is installed
    #   ansible.builtin.package:
    #     name: "{{ docker_compose_package }}"
    #     state: "{{ docker_compose_package_state }}"

    # - name: Ensure Docker Compose plugin is enabled
    #   ansible.builtin.command:
    #     cmd: docker compose version
    #   register: docker_compose_version
    #   changed_when: false
    #   failed_when: docker_compose_version.rc != 0

#===========DOCKER CONTAINERS ===========
    # - name: Pull docker images
    #   ansible.builtin.docker_image:
    #     name: "{{ item.name }}"
    #     source: pull
    #   loop: "{{ docker_images }}" 

    - name: "{{ item.key }}"
      community.docker.docker_container:
        name: "{{ item.key }}"
        image: "{{ item.value.image }}"
        state: "{{ item.value.state }}"
        restart_policy: "{{ item.value.restart_policy | default(omit) }}"
        published_ports: "{{ item.value.published_ports | default(omit) }}"
        volumes: "{{ item.value.volumes | default(omit) }}"
        env:  "{{ item.value.environment | default(omit) }}"
      loop: "{{ docker_container | dict2items }}"


    # - name: Pobierz i uruchom skrypt instalacyjny Containerlab
    #   shell: curl -sL https://containerlab.dev/setup | sudo -E bash -s "all"